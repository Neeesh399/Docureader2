{"ast":null,"code":"var _jsxFileName = \"/mnt/d/Django Server/Docureader/src/components/businessLogic.js\";\nimport React from 'react';\n//import {FiPlusCircle} from 'react-icons/fi';\n\nimport FolderHolder from './folderObject';\nimport RightHolder from './rightHolder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass BusinessLogic extends React.Component {\n  constructor(props) {\n    super(props);\n    let allFolders = JSON.stringify([{\n      name: \"Starting Folder\",\n      documents: [\"Test Doc\"]\n    }]);\n    this.addFolder = this.addFolder.bind(this);\n    this.changeFolderName = this.changeFolderName.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.deleteFolder = this.deleteFolder.bind(this);\n    this.changeDocumentName = this.changeDocumentName.bind(this);\n    this.moveDocument = this.moveDocument.bind(this);\n    this.deleteDocument = this.deleteDocument.bind(this);\n    this.state = {\n      folders: allFolders,\n      files: []\n    };\n  }\n  addFolder() {\n    let allFolders = JSON.parse(this.state.folders);\n    if (allFolders.length < 10) {\n      let newFolder = {\n        name: \"New Folder\",\n        documents: []\n      };\n      allFolders.push(newFolder);\n    }\n    this.setState({\n      folders: JSON.stringify(allFolders),\n      files: this.state.files\n    });\n  }\n  deleteFolder(index) {\n    let allFolders = JSON.parse(this.state.folders);\n    if (allFolders.length > 1) {\n      allFolders.splice(index, 1);\n    }\n    this.setState({\n      folders: JSON.stringify(allFolders),\n      files: this.state.files\n    });\n  }\n  changeFolderName(index, newName) {\n    let allFolders = JSON.parse(this.state.folders);\n    allFolders[index]['name'] = newName;\n    this.setState({\n      folders: JSON.stringify(allFolders),\n      files: this.state.files\n    });\n  }\n  uploadFiles(file) {\n    let newFiles = this.state.files;\n    newFiles.push(file);\n    this.setState({\n      folders: this.state.folders,\n      files: newFiles\n    });\n  }\n  changeDocumentName(folderIndex, documentIndex, newName) {\n    let allFolders = JSON.parse(this.state.folders);\n    allFolders[folderIndex][\"documents\"][documentIndex] = newName;\n    this.setState({\n      folders: JSON.stringify(allFolders),\n      files: this.state.files\n    });\n  }\n  moveDocument(oldFolderIndex, oldDocumentIndex, newFolderIndex) {\n    let allFolders = JSON.parse(this.state.folders);\n    let document = allFolders[oldFolderIndex][\"documents\"][oldDocumentIndex];\n    allFolders[oldFolderIndex][\"documents\"].splice(oldDocumentIndex, 1);\n    allFolders[newFolderIndex]['documents'].push(document);\n    this.setState({\n      folders: JSON.stringify(allFolders),\n      files: this.state.files\n    });\n  }\n  deleteDocument(oldFolderIndex, oldDocumentIndex) {\n    let allFolders = JSON.parse(this.state.folders);\n    allFolders[oldFolderIndex][\"documents\"].splice(oldDocumentIndex, 1);\n    this.setState({\n      folders: JSON.stringify(allFolders),\n      files: this.state.files\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"businessLogic\",\n      children: [/*#__PURE__*/_jsxDEV(FolderHolder, {\n        folders: this.state.folders,\n        addFolder: this.addFolder,\n        changeFolderName: this.changeFolderName,\n        deleteFolder: this.deleteFolder,\n        changeDocumentName: this.changeDocumentName,\n        moveDocument: this.moveDocument,\n        deleteDocument: this.deleteDocument\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RightHolder, {\n        uploadFiles: this.uploadFiles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default BusinessLogic;","map":{"version":3,"names":["React","FolderHolder","RightHolder","jsxDEV","_jsxDEV","BusinessLogic","Component","constructor","props","allFolders","JSON","stringify","name","documents","addFolder","bind","changeFolderName","uploadFiles","deleteFolder","changeDocumentName","moveDocument","deleteDocument","state","folders","files","parse","length","newFolder","push","setState","index","splice","newName","file","newFiles","folderIndex","documentIndex","oldFolderIndex","oldDocumentIndex","newFolderIndex","document","render","id","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/mnt/d/Django Server/Docureader/src/components/businessLogic.js"],"sourcesContent":["import React from 'react';\n//import {FiPlusCircle} from 'react-icons/fi';\n\nimport FolderHolder from './folderObject';\nimport RightHolder from './rightHolder';\n\nclass BusinessLogic extends React.Component{\n  constructor(props){\n    super(props)\n\n    let allFolders = JSON.stringify([{name:\"Starting Folder\", documents:[\"Test Doc\"]}])\n\n    this.addFolder = this.addFolder.bind(this)\n    this.changeFolderName = this.changeFolderName.bind(this)\n    this.uploadFiles = this.uploadFiles.bind(this)\n    this.deleteFolder = this.deleteFolder.bind(this)\n    this.changeDocumentName = this.changeDocumentName.bind(this)\n    this.moveDocument = this.moveDocument.bind(this)\n    this.deleteDocument = this.deleteDocument.bind(this)\n    this.state = {\n      folders: allFolders,\n      files: []\n    }\n  }\n\n  addFolder(){\n    let allFolders = JSON.parse(this.state.folders);\n    if (allFolders.length < 10){\n      let newFolder = {name:\"New Folder\", documents:[]}\n      allFolders.push(newFolder)\n    } \n    this.setState({\n      folders: JSON.stringify(allFolders),\n      files: this.state.files\n    })\n  }\n\n  deleteFolder(index){\n    let allFolders = JSON.parse(this.state.folders);\n    if (allFolders.length > 1){\n      allFolders.splice(index, 1);\n    }\n    this.setState({\n      folders: JSON.stringify(allFolders),\n      files: this.state.files\n    })\n  }\n\n  changeFolderName(index, newName){\n    let allFolders = JSON.parse(this.state.folders);\n    allFolders[index]['name'] = newName;\n    this.setState({\n      folders: JSON.stringify(allFolders),\n      files: this.state.files\n    })\n  }\n\n  uploadFiles(file){\n    let newFiles = this.state.files;\n    newFiles.push(file)\n    this.setState({\n      folders: this.state.folders,\n      files: newFiles\n    })\n  }\n\n  changeDocumentName(folderIndex, documentIndex, newName){\n    let allFolders = JSON.parse(this.state.folders);\n    allFolders[folderIndex][\"documents\"][documentIndex] = newName\n    this.setState({\n      folders: JSON.stringify(allFolders),\n      files: this.state.files\n    })\n  }\n\n  moveDocument(oldFolderIndex, oldDocumentIndex, newFolderIndex){\n    let allFolders = JSON.parse(this.state.folders);\n    let document = allFolders[oldFolderIndex][\"documents\"][oldDocumentIndex]\n    allFolders[oldFolderIndex][\"documents\"].splice(oldDocumentIndex, 1)\n    allFolders[newFolderIndex]['documents'].push(document)\n    this.setState({\n      folders: JSON.stringify(allFolders),\n      files: this.state.files\n    })\n  }\n\n  deleteDocument(oldFolderIndex, oldDocumentIndex){\n    let allFolders = JSON.parse(this.state.folders);\n    allFolders[oldFolderIndex][\"documents\"].splice(oldDocumentIndex, 1)\n    this.setState({\n      folders: JSON.stringify(allFolders),\n      files: this.state.files\n    })\n  }\n\n  render (){\n    return(\n      <div id='businessLogic'>\n        <FolderHolder folders={this.state.folders} addFolder={this.addFolder} changeFolderName={this.changeFolderName} deleteFolder={this.deleteFolder} changeDocumentName={this.changeDocumentName} moveDocument={this.moveDocument} deleteDocument={this.deleteDocument}/>\n        <RightHolder uploadFiles={this.uploadFiles}/>\n      </div>\n    )\n  }\n}\n\nexport default BusinessLogic;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}