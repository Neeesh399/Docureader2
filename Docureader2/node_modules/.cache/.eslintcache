[{"/mnt/d/Django Server/Docureader/src/index.js":"1","/mnt/d/Django Server/Docureader/src/reportWebVitals.js":"2","/mnt/d/Django Server/Docureader/src/App.js":"3","/mnt/d/Django Server/Docureader/src/components/header.js":"4","/mnt/d/Django Server/Docureader/src/pages/login.js":"5","/mnt/d/Django Server/Docureader/src/pages/signup.js":"6","/mnt/d/Django Server/Docureader/src/pages/index.js":"7","/mnt/d/Django Server/Docureader/src/components/businessLogic.js":"8","/mnt/d/Django Server/Docureader/src/components/folderObject.js":"9","/mnt/d/Django Server/Docureader/src/components/rightHolder.js":"10"},{"size":535,"mtime":1683872270199,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1683872270239,"results":"13","hashOfConfig":"12"},{"size":580,"mtime":1683872270145,"results":"14","hashOfConfig":"12"},{"size":932,"mtime":1683872270177,"results":"15","hashOfConfig":"12"},{"size":2622,"mtime":1683872270224,"results":"16","hashOfConfig":"12"},{"size":2481,"mtime":1684212862597,"results":"17","hashOfConfig":"12"},{"size":451,"mtime":1683872270213,"results":"18","hashOfConfig":"12"},{"size":3187,"mtime":1683872270158,"results":"19","hashOfConfig":"12"},{"size":5160,"mtime":1683872270168,"results":"20","hashOfConfig":"12"},{"size":1457,"mtime":1683872270185,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"by3pzv",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},"/mnt/d/Django Server/Docureader/src/index.js",[],[],"/mnt/d/Django Server/Docureader/src/reportWebVitals.js",[],[],"/mnt/d/Django Server/Docureader/src/App.js",[],[],"/mnt/d/Django Server/Docureader/src/components/header.js",[],[],"/mnt/d/Django Server/Docureader/src/pages/login.js",[],[],"/mnt/d/Django Server/Docureader/src/pages/signup.js",[],[],"/mnt/d/Django Server/Docureader/src/pages/index.js",[],[],"/mnt/d/Django Server/Docureader/src/components/businessLogic.js",[],[],"/mnt/d/Django Server/Docureader/src/components/folderObject.js",["54","55"],[],"import React, {useState} from 'react';\nimport {FiChevronDown, FiChevronUp, FiFolderPlus, FiTrash2, FiMessageCircle} from 'react-icons/fi';\n\nimport { useDrag } from 'react-dnd';\nimport { useDrop } from 'react-dnd';\n\nfunction DocumentObject(props){\n  const[, drag] = useDrag(() => ({\n    type: \"document\",\n    item: {\n      name: props.name,\n      type: \"document\",\n      folderIndex: props.folderIndex,\n      documentIndex: props.documentIndex\n    }\n  }))\n\n  let name = props.name;\n  return (\n    <div ref={drag} className='documentDiv'>\n      <input \n        className='documentName'\n        type='text'\n        value={name}\n        onChange={(event) => {\n          props.changeDocumentName(props.folderIndex, props.documentIndex, event.target.value)\n        }}\n      />\n      <button className='chatButton'>\n        <i>\n          <FiMessageCircle className='chatButtonIcon' size='1.5em'/>\n        </i>\n      </button>\n    </div>\n  )\n}\n\nfunction FolderObject(props){\n    const [isClosed, setClosed] = useState(true);\n\n    const[, drag] = useDrag(() => ({\n      type: \"folder\",\n      item:{\n        name: props.name,\n        type: \"folder\",\n        index: props.myIndex\n      }\n    }))\n\n    const[, drop] = useDrop(() => ({\n      accept: \"document\",\n      drop: (item) => handleDrop(item),\n    }))\n\n    const handleDrop = (item) => {\n      props.moveDocument(item['folderIndex'], item[\"documentIndex\"], props.myIndex)\n    }\n\n    let name = props.name\n\n    if (isClosed){\n      return(\n        <div className='folderDiv' ref={(el) => {drag(el); drop(el);}}>\n          <input\n            className='folderName'\n            type='text'\n            value={name}\n            onChange={(event) => {\n              props.changeFolderName(props.myIndex, event.target.value)\n            }}\n            onBlur={(event) => {\n              if (props.name === \"\"){\n                props.changeFolderName(props.myIndex, \"New Folder\")\n              }\n            }}\n          />\n          <button\n            className='folderExpandButton'\n            onClick={() => {\n              setClosed(false)\n              console.log('test')\n            }}>\n            <i>\n              <FiChevronUp className='folderExpandButtonIcon' size='1.5em'/>\n            </i>\n          </button>\n        </div>\n      )\n    }\n    else{\n      let allDocuments = props.allDocuments;\n      return(\n        <div className='folderDivExterior' ref={(el) => {drag(el); drop(el);}}>\n          <div className='folderDiv'>\n            <input\n              className='folderName'\n              type='text'\n              value={name}\n              onChange={(event) => {\n                props.changeFolderName(props.myIndex, event.target.value)\n              }}\n              onBlur={(event) => {\n                if (props.name === \"\"){\n                  props.changeFolderName(props.myIndex, \"New Folder\")\n                }\n              }}\n            />\n            <button\n              className='folderExpandButton'\n              onClick={() => {\n                setClosed(true)\n                console.log('test2')\n              }}>\n              <i>\n                <FiChevronDown className='folderExpandButtonIcon' size='1.5em'/>\n              </i>\n            </button>\n          </div>\n          {\n            allDocuments.map((value, index) => {\n              return <DocumentObject key={index} folderIndex={props.myIndex} documentIndex={index} name={value} changeDocumentName={props.changeDocumentName}/>\n            })\n          }\n        </div>\n      )\n    }\n  }\n  \n  function Trashcan(props){\n    const [{isOver, canDrop}, drop] = useDrop(() => ({\n      accept: [\"folder\", \"document\"],\n      drop: (item) => handleDrop(item),\n      collect: (monitor) => ({\n        isOver: !!monitor.isOver(),\n        canDrop: monitor.canDrop(),\n      })\n    }))\n  \n    /*\n    if (isOver && canDrop){\n      let trashcan = document.getElementById(\"trashBinIcon\")\n      trashcan.style.color=\"rgb(248, 121, 57)\"\n    }*/\n  \n    const handleDrop = (item) => {\n      if (item[\"type\"] === \"folder\"){\n        props.deleteFolder(item[\"index\"])\n      }\n      else{\n        props.deleteDocument(item[\"folderIndex\"], item[\"documentIndex\"])\n      }\n    }\n  \n    return (\n      <div id='trashBin' ref={drop}>\n        <i id='trashBinIcon'>\n          <FiTrash2 size='2em'/>\n        </i>\n      </div>\n    )\n  }\n  \nfunction FolderHolder(props){\n    let allFolders = JSON.parse(props.folders)\n\n    return (\n        <div id='folderHolder'>\n        { allFolders.map((value, index) => {\n            return <FolderObject key={index} name={value['name']} myIndex={index} changeFolderName={props.changeFolderName} allDocuments={value['documents']} changeDocumentName={props.changeDocumentName} moveDocument={props.moveDocument}/>\n        }) }\n        <div id='footerInFolderHolder'> \n            <button id='folderAddButton' onClick={props.addFolder}>\n            <i>\n                <FiFolderPlus id='folderAddIcon' size='2em'/>\n            </i>\n            </button>\n            <Trashcan deleteFolder={props.deleteFolder} deleteDocument={props.deleteDocument}/>\n        </div>\n        </div>\n    )\n}\n\nexport default FolderHolder;","/mnt/d/Django Server/Docureader/src/components/rightHolder.js",["56"],[],"import React, {useState} from 'react';\nimport {FiPlusCircle} from 'react-icons/fi';\nimport Axios from 'axios';\n\nfunction FileUploader(props){\n\n    const uploadHandler = (event) => {\n      const file = event.target.files[0]\n      file.isUploading = true;\n      console.log(file)\n\n      const formData = new FormData()\n      formData.append(\n        file.name,\n        file,\n        file.name\n      )\n      formData.append('username', sessionStorage.getItem('username'))\n      formData.append('id', sessionStorage.getItem('id'))  \n\n      Axios.post('http://127.0.0.1:8000/uploadDocument/', formData)\n      .then((res) => {\n        file.isUploading = false;\n        console.log(res)\n      })\n      .catch((err) => {\n        console.error(err)\n      })\n    }\n\n    return (\n      <div id='fileInputCard'>\n        <div id='fileInputDiv'>\n          <input \n            id = 'fileInput'\n            type='file'\n            onChange={uploadHandler}\n          />\n          <button id='fileInputButton'>\n            <i id='fileInputIconHolder'>\n              <FiPlusCircle id='fileInputButtonIcon' size='2em'/>\n            </i>\n          </button>\n        </div>\n        <p id='fileInputBigText'>Supported Files:</p>\n        <p id='fileInputSmallText'>PDF</p>\n      </div>\n    )\n  }\n  \n  function RightHolder(props){\n    return (\n      <div id='rightHolder'>\n        <FileUploader uploadFiles={props.uploadFiles}/>\n      </div>\n    )\n  }\n\n  export default RightHolder;",{"ruleId":"57","severity":1,"message":"58","line":130,"column":13,"nodeType":"59","messageId":"60","endLine":130,"endColumn":19},{"ruleId":"57","severity":1,"message":"61","line":130,"column":21,"nodeType":"59","messageId":"60","endLine":130,"endColumn":28},{"ruleId":"57","severity":1,"message":"62","line":1,"column":16,"nodeType":"59","messageId":"60","endLine":1,"endColumn":24},"no-unused-vars","'isOver' is assigned a value but never used.","Identifier","unusedVar","'canDrop' is assigned a value but never used.","'useState' is defined but never used."]